[{"path":"https://ehrlinger.github.io/boostmtree/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Udaya B. Kogalur. Maintainer.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ishwaran H., Pande . Kogalur U.B. (2025). Boosted Multivariate Trees Longitudinal Data, R package version 1.5.2.","code":"@Manual{,   title = {Boosted Multivariate Trees for Longitudinal Data},   author = {H. Ishwaran and A. Pande and U.B. Kogalur},   publisher = {manual},   year = {2025},   note = {R package version 1.5.2},   url = {https://cran.r-project.org/package=boostmtree},   pdf = {https://cran.r-project.org/web/packages/boostmtree/boostmtree.pdf}, }"},{"path":"https://ehrlinger.github.io/boostmtree/index.html","id":"boostmtree---boosted-multivariate-trees-for-longitudinal-data","dir":"","previous_headings":"","what":"Boosted Multivariate Trees for Longitudinal Data","title":"Boosted Multivariate Trees for Longitudinal Data","text":"Implements Friedman’s gradient descent boosting algorithm modeling longitudinal response using multivariate tree base learners. Longitudinal response continuous, binary, nominal ordinal. time-covariate interaction effect modeled using penalized B-splines (P-splines) estimated adaptive smoothing parameter. Although package design longitudinal data, can handle cross-sectional data well.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/index.html","id":"package-overview","dir":"","previous_headings":"","what":"Package Overview","title":"Boosted Multivariate Trees for Longitudinal Data","text":"package contains many useful functions users read help file entirety details. However, briefly mention several key functions may make easier navigate understand layout package. boostmtree - main entry point package. grows multivariate tree using user supplied training data. Trees grown using randomForestSRC R-package. predict.boostmtree - Used prediction. Predicted values obtained dropping user supplied test data grow forest. resulting object class (rfsrc, predict).","code":""},{"path":"https://ehrlinger.github.io/boostmtree/index.html","id":"authors","dir":"","previous_headings":"","what":"Authors","title":"Boosted Multivariate Trees for Longitudinal Data","text":"Hemant Ishwaran, Amol Pande Udaya B. Kogalur","code":""},{"path":"https://ehrlinger.github.io/boostmtree/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Boosted Multivariate Trees for Longitudinal Data","text":"Friedman J.H. (2001). Greedy function approximation: gradient boosting machine, Ann. Statist., 5:1189-1232. Pande ., Li L., Rajeswaran J., Ehrlinger J., Kogalur U., Blackstone E.H., Ishwaran H. Boosted Multivariate Trees Longitudinal Data Mach Learn, . 2017 Feb;106(2):277-305. doi: 10.1007/s10994-016-5597-1.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/AF.html","id":null,"dir":"Reference","previous_headings":"","what":"Atrial Fibrillation Data — AF","title":"Atrial Fibrillation Data — AF","text":"Atrial Fibrillation (AF) data obtained randomized trial study effect surgical ablation treatment option AF among patients persistent long-standing persistent AF requires mitral valve surgery. Patients randomized two groups: mitral valve surgery ablation mitral valve surgery without ablation. Patients ablation group randomized two types procedure: pulmonary vain isolation (PVI) biatrial maze procedure. patients followed weekly period 12 months. primary outcome study presence/absence AF (binary longitudinal response). Data includes 228 patients. 228 patients, 7949 AF measurements available average 35 measurements per patient.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/AF.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Atrial Fibrillation Data — AF","text":"list containing four elements: 84 patient variables (features). Time points (time). Unique patient identifier (id). Presence absence AF (y).","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/AF.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Atrial Fibrillation Data — AF","text":"Gillinov . M., Gelijns .C., Parides M.K., DeRose J.J.Jr., Moskowitz~.J. et al. Surgical ablation atrial fibrillation mitral valve surgery. New England Journal Medicine 372(15):1399–1408, 2015.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/AF.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atrial Fibrillation Data — AF","text":"","code":"data(AF, package = \"boostmtree\")"},{"path":"https://ehrlinger.github.io/boostmtree/reference/boostmtree.html","id":null,"dir":"Reference","previous_headings":"","what":"Boosted multivariate trees for longitudinal data — boostmtree","title":"Boosted multivariate trees for longitudinal data — boostmtree","text":"Multivariate extension Friedman's gradient descent boosting method   modeling continuous binary longitudinal response using   multivariate tree base learners (Pande et   al., 2017).  Covariate-time interactions modeled using penalized   B-splines (P-splines) estimated adaptive smoothing parameter.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/boostmtree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boosted multivariate trees for longitudinal data — boostmtree","text":"","code":"boostmtree(x,             tm,             id,             y,             family = c(\"Continuous\",\"Binary\",\"Nominal\",\"Ordinal\"),             y_reference = NULL,             M = 200,             nu = 0.05,             na.action = c(\"na.omit\",\"na.impute\")[2],             K = 5,             mtry = NULL,             nknots = 10,             d = 3,             pen.ord = 3,             lambda,             rho,             lambda.max = 1e6,             lambda.iter = 2,             svd.tol = 1e-6,             forest.tol = 1e-3,             verbose = TRUE,             cv.flag = FALSE,             eps = 1e-5,             mod.grad = TRUE,             NR.iter = 3,             ...)"},{"path":"https://ehrlinger.github.io/boostmtree/reference/boostmtree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boosted multivariate trees for longitudinal data — boostmtree","text":"x Data frame (matrix) containing x-values.   Rows       must duplicated match number time points individual.       , individual n[] outcome y-values,       must n[] duplicate rows 's x-value. tm Vector time values, one entry row x. id Unique subject identifier, one entry row x. y Observed y-value, one entry row x. family Family response variable y. Use one     {\"Continuous\", \"Binary\",\"Nominal\",\"Ordinal\"} based scale y. y_reference Set value, among unique y values     family == \"Nominal\". NULL, lowest value, among unique y values, used. M Number boosting iterations nu Boosting regularization parameter.  value (0,1]. na.action Remove missing values (casewise) impute . Default impute missign values. K Number terminal nodes used multivariate tree learner. mtry Number x variables selected randomly tree fitting. Default use x variables. nknots Number knots used B-spline modeling     time interaction effect. d Degree piecewise B-spline polynomial (time       effect fit d < 1). pen.ord Differencing order used define penalty       increasing values implying greater smoothness. lambda Smoothing (penalty) parameter used B-splines       increasing values associated increasing       smoothness/penalization. missing, non-positive, value       estimated adaptively using mixed models approach. rho missing, rho estimated, else, use rho value specified argument. lambda.max Tolerance used adaptively estimated lambda       (caps ).  experts . lambda.iter Number iterations used estimate lambda       (applies lambda supplied adaptive smoothing       employed). svd.tol Tolerance value used SVD calculation       penalty matrix.  experts . forest.tol Tolerance used forest weighted least squares       solution.  Experimental experts . verbose verbose output printed? cv.flag -sample cross-validation (CV) used determine       optimal stopping using bag data? eps Tolerance value used determining optimal        M. Applies cv.flag = TRUE.  experts . mod.grad Use modified gradient? See details . NR.iter Number Newton-Raphson iteration. Applied     family = {Binary\",\"Nominal\",\"Ordinal\"}. ... arguments passed methods.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/boostmtree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Boosted multivariate trees for longitudinal data — boostmtree","text":"individual observed y-values, possibly different time   points, possibly differing number time points.  Given y,   time points, x, conditional mean time profile y   estimated using gradient boosting gradient derived   criterion function involving working variance matrix y   specified equicorrelation matrix parameter rho   multiplied variance parameter phi. Multivariate trees   used base learners weighted least squares used solving   terminal node optimization problem.  provides solutions   core parameters algorithm.  ancillary parameters,   mixed-model formulation used estimate smoothing parameter   associated B-splines used time-interaction effect,   although user can manually set smoothing parameter well.   Ancillary parameters rho phi estimated using GLS   (generalized least squares). original boostmtree algorithm (Pande et al., 2017),   equicorrelation parameter rho used two places   algorithm: (1) growing trees using gradient, depends   upon rho; (2) solving terminal node optimization   problem also uses gradient.  However, Pande (2017) observed   setting rho zero gradient used growing trees   improved performance algorithm, especially high dimensions.   reason default setting used algorithm set   rho zero gradient (1).  rho   gradient (2) touched.  option mod.grad specifies   whether modified gradient used tree growing process   TRUE default. default, trees grown bootstrap sample data –   thus boosting method employed modified example   stochastic gradient descent boosting (Friedman, 2002).  Stochastic   descent often improves performance added advantage   --sample data (--bag, OOB) can used calculate   variable importance (VIMP). package implements R-side parallel processing replacing   R function lapply mclapply found   parallel package.  can set number cores accessed   mclapply issuing command options(mc.cores =     x), x number cores.  options command   can also placed users .Rprofile file convenience.    can, alternatively, initialize environment variable   MC_CORES shell environment. example, issuing following options command uses   available cores R-side parallel processing: options(mc.cores=detectCores()) However, cautious setting mc.cores.  can create   high CPU usage also high RAM usage, especially using   functions partialPlot predict. method can impute missing observations x (covariates) using   fly imputation. Details regarding can found   randomForestSRC package. missing values present   tm, id y, user either impute   delete values executing function. Finally note cv.flag can used -sample   cross-validated estimate prediction error.  used   determine optimized number boosting iterations Mopt.   final mu predictor evaluated value   cross-validated.  prediction error returned via err.rate   standardized overall standard deviation y.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/boostmtree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boosted multivariate trees for longitudinal data — boostmtree","text":"  object class (boostmtree, grow) following   components:  x x-values, one row per individual        (.e. duplicated rows removed). Values sorted id. xvar.names X-variable names. time List component containing time        points given individual. Values sorted id. id Sorted subject identifier. y List component containing observed        y-values given individual. Values sorted id. Yorg family == \"Nominal\" family == \"Ordinal\", provides      response list-format element coverted response binary response. family Family y. ymean Overall mean y-values individuals. family =      \"Binary\", ymean = 0. ysd Overall standard deviation y-values individuals. family =      \"Binary\", ysd = 1. na.action Remove missing values impute? n Total number subjects. ni Number repeated measures subject. n.Q Number class labels non-continuous response. Q_set Class labels non-continuous response. y.unq Unique y values non-continous response. y_reference Reference value family == \"Nominal\". tm.unq Unique time points. gamma List length M, component        containing boosted tree fitted values. mu List component containing estimated mean        values individual.  , component contains        estimated time-profile individual.  -sample        cross-validation requested using cv.flag=TRUE,        estimated mean cross-validated evaluated optimal        number iterations Mopt.        family == \"Nominal\" family == \"Ordinal\", mu higher level        list accommodate binary responses generated nominal ordinal response. Prob_class family == \"Ordinal\", provides individual probabilty rather      cumulative probabilty. lambda Smoothing parameter. Results provided vector matrix form, depending      whether family == c(\"Continuous\",\"Binary\") family == c(\"Nominal\", \"Ordinal\"). phi Variance parameter.Results provided vector matrix form, depending      whether family == c(\"Continuous\",\"Binary\") family == c(\"Nominal\", \"Ordinal\"). rho Correlation parameter.Results provided vector matrix form, depending      whether family == c(\"Continuous\",\"Binary\") family == c(\"Nominal\", \"Ordinal\"). baselearner List length M containing base learners. membership List length M, component        containing terminal node membership given boosting        iteration. X.tm Design matrix unique time points. D Design matrix subject. d Degree piecewise B-spline polynomial. pen.ord Penalization difference order. K Number terminal nodes. M Number boosting iterations. nu Boosting regularization parameter. ntree Number trees. cv.flag Whether -sample CV used ? err.rate -sample standardized estimate l1-error RMSE. rmse -sample standardized RMSE optimized M. Mopt optimized M. gamma..list Estimate gamma obtained -sample CV cv.flag = TRUE,       else NULL forest.tol Forest tolerance value (needed prediction).","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/boostmtree.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Boosted multivariate trees for longitudinal data — boostmtree","text":"Hemant Ishwaran, Amol Pande Udaya B. Kogalur","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/boostmtree.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Boosted multivariate trees for longitudinal data — boostmtree","text":"Friedman J.H. (2001). Greedy function approximation: gradient   boosting machine, Ann. Statist., 5:1189-1232. Friedman J.H. (2002). Stochastic gradient boosting.   Comp. Statist. Data Anal., 38(4):367–378. Pande ., Li L., Rajeswaran J., Ehrlinger J., Kogalur U.B.,   Blackstone E.H., Ishwaran H. (2017).  Boosted multivariate trees   longitudinal data, Machine Learning, 106(2): 277–305. Pande . (2017).  Boosting longitudinal data.  Ph.D. Dissertation,   Miller School Medicine, University Miami.","code":""},{"path":[]},{"path":"https://ehrlinger.github.io/boostmtree/reference/boostmtree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boosted multivariate trees for longitudinal data — boostmtree","text":"","code":"##------------------------------------------------------------ ## synthetic example (Response y is continuous) ## 0.8 correlation, quadratic time with quadratic interaction ##------------------------------------------------------------- #simulate the data (use a small sample size for illustration) dta <- simLong(n = 50, N = 5, rho =.80, model = 2,family = \"Continuous\")$dtaL  #basic boosting call (M set to a small value for illustration) boost.grow <- boostmtree(dta$features, dta$time, dta$id, dta$y,family = \"Continuous\",M = 20) #>    |                                                                               |                                                                      |   0%   |                                                                               |====                                                                  |   5%   |                                                                               |=======                                                               |  10%   |                                                                               |==========                                                            |  15%   |                                                                               |==============                                                        |  20%   |                                                                               |==================                                                    |  25%   |                                                                               |=====================                                                 |  30%   |                                                                               |========================                                              |  35%   |                                                                               |============================                                          |  40%   |                                                                               |================================                                      |  45%   |                                                                               |===================================                                   |  50%   |                                                                               |======================================                                |  55%   |                                                                               |==========================================                            |  60%   |                                                                               |==============================================                        |  65%   |                                                                               |=================================================                     |  70%   |                                                                               |====================================================                  |  75%   |                                                                               |========================================================              |  80%   |                                                                               |============================================================          |  85%   |                                                                               |===============================================================       |  90%   |                                                                               |==================================================================    |  95%   |                                                                               |======================================================================| 100%  #print results print(boost.grow) #> model                       : mtree-Pspline learner  #> fitting mode                : grow  #> Family                      : Continuous  #> number of K-terminal nodes  : 5  #> regularization parameter    : 0.05  #> sample size                 : 50  #> number of variables         : 4  #> number of unique time points: 15  #> avg. number of time points  : 7.96  #> B-spline dimension          : 14  #> penalization order          : 3  #> boosting iterations         : 20   #plot.results plot(boost.grow) #> Plot will be saved at:/tmp/RtmpoNV0ny  ##------------------------------------------------------------ ## synthetic example (Response y is binary) ## 0.8 correlation, quadratic time with quadratic interaction ##------------------------------------------------------------- #simulate the data (use a small sample size for illustration) dta <- simLong(n = 50, N = 5, rho =.80, model = 2, family = \"Binary\")$dtaL  #basic boosting call (M set to a small value for illustration) boost.grow <- boostmtree(dta$features, dta$time, dta$id, dta$y,family = \"Binary\", M = 20) #>    |                                                                               |                                                                      |   0%   |                                                                               |====                                                                  |   5%   |                                                                               |=======                                                               |  10%   |                                                                               |==========                                                            |  15%   |                                                                               |==============                                                        |  20%   |                                                                               |==================                                                    |  25%   |                                                                               |=====================                                                 |  30%   |                                                                               |========================                                              |  35%   |                                                                               |============================                                          |  40%   |                                                                               |================================                                      |  45%   |                                                                               |===================================                                   |  50%   |                                                                               |======================================                                |  55%   |                                                                               |==========================================                            |  60%   |                                                                               |==============================================                        |  65%   |                                                                               |=================================================                     |  70%   |                                                                               |====================================================                  |  75%   |                                                                               |========================================================              |  80%   |                                                                               |============================================================          |  85%   |                                                                               |===============================================================       |  90%   |                                                                               |==================================================================    |  95%   |                                                                               |======================================================================| 100%  #print results print(boost.grow) #> model                       : mtree-Pspline learner  #> fitting mode                : grow  #> Family                      : Binary  #> number of K-terminal nodes  : 5  #> regularization parameter    : 0.05  #> sample size                 : 50  #> number of variables         : 4  #> number of unique time points: 15  #> avg. number of time points  : 8.48  #> B-spline dimension          : 14  #> penalization order          : 3  #> boosting iterations         : 20   #plot.results plot(boost.grow) #> Plot will be saved at:/tmp/RtmpoNV0ny  if (FALSE) { # \\dontrun{ ##------------------------------------------------------------ ## Same synthetic example as above with continuous response ## but with in-sample cross-validation estimate for RMSE ##------------------------------------------------------------- dta <- simLong(n = 50, N = 5, rho =.80, model = 2,family = \"Continuous\")$dtaL boost.cv.grow <- boostmtree(dta$features, dta$time, dta$id, dta$y,                  family = \"Continuous\", M = 300, cv.flag = TRUE) plot(boost.cv.grow) print(boost.cv.grow)  ##---------------------------------------------------------------------------- ## spirometry data (Response is continuous) ##---------------------------------------------------------------------------- data(spirometry, package = \"boostmtree\")  #boosting call: cubic B-splines with 15 knots spr.obj <- boostmtree(spirometry$features, spirometry$time, spirometry$id, spirometry$y,                         family = \"Continuous\",M = 100, nu = .025, nknots = 15) plot(spr.obj)   ##---------------------------------------------------------------------------- ## Atrial Fibrillation data (Response is binary) ##---------------------------------------------------------------------------- data(AF, package = \"boostmtree\")  #boosting call: cubic B-splines with 15 knots AF.obj <- boostmtree(AF$feature, AF$time, AF$id, AF$y,                         family = \"Binary\",M = 100, nu = .025, nknots = 15) plot(AF.obj)   ##---------------------------------------------------------------------------- ## sneaky way to use boostmtree for (univariate) regression: boston housing ##----------------------------------------------------------------------------  if (library(\"mlbench\", logical.return = TRUE)) {    ## assemble the data   data(BostonHousing)   x <- BostonHousing; x$medv <- NULL   y <- BostonHousing$medv   trn <- sample(1:nrow(x), size = nrow(x) * (2 / 3), replace = FALSE)    ## run boosting in univariate mode   o <- boostmtree(x = x[trn,], y = y[trn],family = \"Continuous\")   o.p <- predict(o, x = x[-trn, ], y = y[-trn])   print(o)   plot(o.p)    ## run boosting in univariate mode to obtain RMSE and vimp   o.cv <- boostmtree(x = x, y = y, M = 100,family = \"Continuous\",cv.flag = TRUE)   print(o.cv)   plot(o.cv) }  } # }"},{"path":"https://ehrlinger.github.io/boostmtree/reference/boostmtree.news.html","id":null,"dir":"Reference","previous_headings":"","what":"Show the NEWS file — boostmtree.news","title":"Show the NEWS file — boostmtree.news","text":"Show NEWS file boostmtree package.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/boostmtree.news.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show the NEWS file — boostmtree.news","text":"","code":"boostmtree.news(...)"},{"path":"https://ehrlinger.github.io/boostmtree/reference/boostmtree.news.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show the NEWS file — boostmtree.news","text":"... arguments passed methods.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/boostmtree.news.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show the NEWS file — boostmtree.news","text":"None.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/boostmtree.news.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Show the NEWS file — boostmtree.news","text":"Hemant Ishwaran, Amol Pande  Udaya B. Kogalur","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/boostmtree_package.html","id":null,"dir":"Reference","previous_headings":"","what":"Boosted multivariate trees for longitudinal data. — boostmtree-package","title":"Boosted multivariate trees for longitudinal data. — boostmtree-package","text":"Multivariate extension Friedman's (2001) gradient descent boosting   method modeling longitudinal response   using multivariate tree base learners.   Longitudinal response continuous, binary, nominal ordinal.   Covariate-time interactions modeled using penalized B-splines   (P-splines) estimated adaptive smoothing parameter.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/boostmtree_package.html","id":"package-overview","dir":"Reference","previous_headings":"","what":"Package Overview","title":"Boosted multivariate trees for longitudinal data. — boostmtree-package","text":"package contains many useful functions users read   help file entirety details.  However, briefly mention   several key functions may make easier navigate   understand layout package.  boostmtree main entry point package.  grows     multivariate tree using user supplied training data.  Trees     grown using randomForestSRC R-package. predict.boostmtree (predict) Used prediction.  Predicted values obtained dropping     user supplied test data grow forest.  resulting object     class (rfsrc, predict).","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/boostmtree_package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Boosted multivariate trees for longitudinal data. — boostmtree-package","text":"Hemant Ishwaran, Amol Pande Udaya B. Kogalur","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/boostmtree_package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Boosted multivariate trees for longitudinal data. — boostmtree-package","text":"Friedman J.H. (2001). Greedy function approximation: gradient   boosting machine, Ann. Statist., 5:1189-1232. Friedman J.H. (2002). Stochastic gradient boosting.   Comp. Statist. Data Anal., 38(4):367–378. Pande ., Li L., Rajeswaran J., Ehrlinger J., Kogalur U.B.,   Blackstone E.H., Ishwaran H. (2017).  Boosted multivariate trees   longitudinal data, Machine Learning, 106(2): 277–305.","code":""},{"path":[]},{"path":"https://ehrlinger.github.io/boostmtree/reference/marginalPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Marginal plot analysis — marginalPlot","title":"Marginal plot analysis — marginalPlot","text":"Marginal plot x unadjusted predicted y. mainly used obtain   marginal relationships x unadjusted predicted   y. Marginal plots faster   execution compared partial plots (Friedman, 2001).","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/marginalPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Marginal plot analysis — marginalPlot","text":"","code":"marginalPlot(object,              xvar.names,              tm.unq,              subset,              plot.it = FALSE,              path_saveplot = NULL,              Verbose = TRUE,              ...)"},{"path":"https://ehrlinger.github.io/boostmtree/reference/marginalPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Marginal plot analysis — marginalPlot","text":"object boosting object class (boostmtree, grow). xvar.names Names x-variables used.  default,     variables plotted. tm.unq Unique time points used plots x y.  default,     deciles observed time values used. subset Vector indicating rows x-data used     analysis.  default use entire data. plot.plots displayed? xvar.names vector   one variable name, instead displaying, plot stored \"MarginalPlot.pdf\" location specified   path_saveplot. path_saveplot Provide location plot saved. default plot saved temporary folder. Verbose Display path plot saved? ... arguments passed methods.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/marginalPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Marginal plot analysis — marginalPlot","text":"Marginal plot x values specified   xvar.names unadjusted predicted y-values set   time points specified tm.unq.  Analysis can restricted   subset data using subset.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/marginalPlot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Marginal plot analysis — marginalPlot","text":"Hemant Ishwaran, Amol Pande Udaya B. Kogalur","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/marginalPlot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Marginal plot analysis — marginalPlot","text":"Friedman J.H. Greedy function approximation: gradient   boosting machine, Ann. Statist., 5:1189-1232, 2001.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/marginalPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Marginal plot analysis — marginalPlot","text":"","code":"if (FALSE) { # \\dontrun{ ##------------------------------------------------------------ ## Synthetic example (Response is continuous) ## High correlation, quadratic time with quadratic interaction ##------------------------------------------------------------- #simulate the data dta <- simLong(n = 50, N = 5, rho =.80, model = 2,family = \"Continuous\")$dtaL  #basic boosting call boost.grow <- boostmtree(dta$features, dta$time, dta$id, dta$y, family = \"Continuous\", M = 300)  #plot results #x1 has a linear main effect #x2 is quadratic with quadratic time trend marginalPlot(boost.grow, \"x1\",plot.it = TRUE) marginalPlot(boost.grow, \"x2\",plot.it = TRUE)  #Plot of all covariates. The plot will be stored as the \"MarginalPlot.pdf\" # in the current working directory. marginalPlot(boost.grow,plot.it = TRUE)   ##------------------------------------------------------------ ## Synthetic example (Response is binary) ## High correlation, quadratic time with quadratic interaction ##------------------------------------------------------------- #simulate the data dta <- simLong(n = 50, N = 5, rho =.80, model = 2,family = \"Binary\")$dtaL  #basic boosting call boost.grow <- boostmtree(dta$features, dta$time, dta$id, dta$y, family = \"Binary\", M = 300)  #plot results #x1 has a linear main effect #x2 is quadratic with quadratic time trend marginalPlot(boost.grow, \"x1\",plot.it = TRUE) marginalPlot(boost.grow, \"x2\",plot.it = TRUE)  #Plot of all covariates. The plot will be stored as the \"MarginalPlot.pdf\" # in the current working directory. marginalPlot(boost.grow,plot.it = TRUE)  ##---------------------------------------------------------------------------- ## spirometry data ##---------------------------------------------------------------------------- data(spirometry, package = \"boostmtree\")  #boosting call: cubic B-splines with 15 knots spr.obj <- boostmtree(spirometry$features, spirometry$time, spirometry$id, spirometry$y,             family = \"Continuous\",M = 300, nu = .025, nknots = 15)  #marginal plot of double-lung group at 5 years dltx <- marginalPlot(spr.obj, \"AGE\", tm.unq = 5, subset = spr.obj$x$DOUBLE==1,plot.it = TRUE)  #marginal plot of single-lung group at 5 years sltx <- marginalPlot(spr.obj, \"AGE\", tm.unq = 5, subset = spr.obj$x$DOUBLE==0,plot.it = TRUE)  #combine the two plots dltx <- dltx[[2]][[1]] sltx <- sltx[[2]][[1]] plot(range(c(dltx[[1]][, 1], sltx[[1]][, 1])), range(c(dltx[[1]][, -1], sltx[[1]][, -1])),      xlab = \"age\", ylab = \"predicted y\", type = \"n\") lines(dltx[[1]][, 1][order(dltx[[1]][, 1]) ], dltx[[1]][, -1][order(dltx[[1]][, 1]) ],        lty = 1, lwd = 2, col = \"red\") lines(sltx[[1]][, 1][order(sltx[[1]][, 1]) ], sltx[[1]][, -1][order(sltx[[1]][, 1]) ],        lty = 1, lwd = 2, col = \"blue\") legend(\"topright\", legend = c(\"DLTx\", \"SLTx\"), lty = 1, fill = c(2,4)) } # }"},{"path":"https://ehrlinger.github.io/boostmtree/reference/partialPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Partial plot analysis — partialPlot","title":"Partial plot analysis — partialPlot","text":"Partial dependence plot x adjusted predicted y.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/partialPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Partial plot analysis — partialPlot","text":"","code":"partialPlot(object,             M = NULL,             xvar.names,             tm.unq,             xvar.unq = NULL,             npts = 25,             subset,             prob.class = FALSE,             conditional.xvars = NULL,             conditional.values = NULL,             plot.it = FALSE,             Variable_Factor = FALSE,             path_saveplot = NULL,             Verbose = TRUE,             useCVflag = FALSE,             ...)"},{"path":"https://ehrlinger.github.io/boostmtree/reference/partialPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Partial plot analysis — partialPlot","text":"object boosting object class (boostmtree, grow). M Fixed value boosting step number. NULL, use Mopt   available object, else use M xvar.names Names x-variables used.  default,     variables plotted. tm.unq Unique time points used plots x y.  default,     deciles observed time values used. xvar.unq Unique values used partial plot. Default NULL case   unique values obtained uniformaly based range variable. Values must   provided using list length lenght xvar.names. npts Maximum number points used x.  Reduce value     plots slow. subset Vector indicating rows x-data used     analysis.  default use entire data. prob.class case ordinal response, use class probability rather cumulative probability. conditional.xvars Vector character values indicating names x-variables     used conditioning (adjusting) predicted y values. Variable names     different xvar.names. conditional.values Vector values taken variables conditional.xvars.     length vector length vector conditional.xvars, means one value per conditional variable. plot.plots displayed? Variable_Factor Default FALSE. Use TRUE variable specified   xvar.names factor. path_saveplot Provide location plot saved. default plot saved temporary folder. Verbose Display path plot saved? useCVflag predicted value based estimate derived oob sample? ... arguments passed methods.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/partialPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Partial plot analysis — partialPlot","text":"Partial dependence plot (Friedman, 2001) x values specified   xvar.names adjusted predicted y-values set   time points specified tm.unq.  Analysis can restricted   subset data using subset. conditioning can   imposed using conditional.xvars.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/partialPlot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Partial plot analysis — partialPlot","text":"Hemant Ishwaran, Amol Pande Udaya B. Kogalur","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/partialPlot.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Partial plot analysis — partialPlot","text":"Friedman J.H. Greedy function approximation: gradient   boosting machine, Ann. Statist., 5:1189-1232, 2001.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/partialPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Partial plot analysis — partialPlot","text":"","code":"if (FALSE) { # \\dontrun{ ##------------------------------------------------------------ ## Synthetic example (Response is continuous) ## high correlation, quadratic time with quadratic interaction ##------------------------------------------------------------- #simulate the data dta <- simLong(n = 50, N = 5, rho =.80, model = 2,family = \"Continuous\")$dtaL  #basic boosting call boost.grow <- boostmtree(dta$features, dta$time, dta$id, dta$y,family = \"Continuous\",M = 300)  #plot results #x1 has a linear main effect #x2 is quadratic with quadratic time trend pp.obj <- partialPlot(object = boost.grow, xvar.names = \"x1\",plot.it = TRUE) pp.obj <- partialPlot(object = boost.grow, xvar.names = \"x2\",plot.it = TRUE)  #partial plot using \"x2\" as the conditional variable pp.obj <- partialPlot(object = boost.grow, xvar.names = \"x1\",                       conditional.xvar = \"x2\", conditional.values = 1,plot.it = TRUE) pp.obj <- partialPlot(object = boost.grow, xvar.names = \"x1\",                       conditional.xvar = \"x2\", conditional.values = 2,plot.it = TRUE)  ##------------------------------------------------------------ ## Synthetic example (Response is binary) ## high correlation, quadratic time with quadratic interaction ##------------------------------------------------------------- #simulate the data dta <- simLong(n = 50, N = 5, rho =.80, model = 2,family = \"Binary\")$dtaL  #basic boosting call boost.grow <- boostmtree(dta$features, dta$time, dta$id, dta$y,family = \"Binary\",M = 300)  #plot results #x1 has a linear main effect #x2 is quadratic with quadratic time trend pp.obj <- partialPlot(object = boost.grow, xvar.names = \"x1\",plot.it = TRUE) pp.obj <- partialPlot(object = boost.grow, xvar.names = \"x2\",plot.it = TRUE)  ##---------------------------------------------------------------------------- ## spirometry data ##---------------------------------------------------------------------------- data(spirometry, package = \"boostmtree\")  #boosting call: cubic B-splines with 15 knots spr.obj <- boostmtree(spirometry$features, spirometry$time, spirometry$id, spirometry$y,             family = \"Continuous\",M = 300, nu = .025, nknots = 15)  #partial plot of double-lung group at 5 years dltx <- partialPlot(object = spr.obj, xvar.names = \"AGE\",                     tm.unq = 5, subset=spr.obj$x$DOUBLE==1,plot.it = TRUE)  #partial plot of single-lung group at 5 years sltx <- partialPlot(object = spr.obj, xvar.names = \"AGE\",                     tm.unq = 5, subset=spr.obj$x$DOUBLE==0,plot.it = TRUE)  #combine the two plots: we use lowess smoothed values dltx <- dltx$l.obj[[1]] sltx <- sltx$l.obj[[1]] plot(range(c(dltx[, 1], sltx[, 1])), range(c(dltx[, -1], sltx[, -1])),      xlab = \"age\", ylab = \"predicted y (adjusted)\", type = \"n\") lines(dltx[, 1], dltx[, -1], lty = 1, lwd = 2, col = \"red\") lines(sltx[, 1], sltx[, -1], lty = 1, lwd = 2, col = \"blue\") legend(\"topright\", legend = c(\"DLTx\", \"SLTx\"), lty = 1, fill = c(2,4)) } # }"},{"path":"https://ehrlinger.github.io/boostmtree/reference/plot.boostmtree.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Summary Analysis — plot.boostmtree","title":"Plot Summary Analysis — plot.boostmtree","text":"Plot summary analysis boosting analysis.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/plot.boostmtree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Summary Analysis — plot.boostmtree","text":"","code":"# S3 method for class 'boostmtree' plot(x, use.rmse = TRUE, path_saveplot = NULL, Verbose = TRUE, ...)"},{"path":"https://ehrlinger.github.io/boostmtree/reference/plot.boostmtree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Summary Analysis — plot.boostmtree","text":"x object class (boostmtree, grow)     (boostmtree, predict). use.rmse Report performance values terms standardized     root-mean-squared-error (RMSE) mean-squared-error (MSE)?  Default   standardized RMSE. path_saveplot Provide location plot saved. default plot saved temporary folder. Verbose Display path plot saved? ... arguments passed methods.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/plot.boostmtree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Summary Analysis — plot.boostmtree","text":"Plot summary output, including predicted values residuals.  Also plots   various parameters number boosting iterations.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/plot.boostmtree.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Plot Summary Analysis — plot.boostmtree","text":"Hemant Ishwaran, Amol Pande Udaya B. Kogalur","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/plot.boostmtree.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plot Summary Analysis — plot.boostmtree","text":"Pande ., Li L., Rajeswaran J., Ehrlinger J., Kogalur U.B.,   Blackstone E.H., Ishwaran H. (2017).  Boosted multivariate trees   longitudinal data, Machine Learning, 106(2): 277–305.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/predict.boostmtree.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction for Boosted multivariate trees for longitudinal data. — predict.boostmtree","title":"Prediction for Boosted multivariate trees for longitudinal data. — predict.boostmtree","text":"Obtain predicted values.  Also returns test-set performance   test data contains y-outcomes.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/predict.boostmtree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction for Boosted multivariate trees for longitudinal data. — predict.boostmtree","text":"","code":"# S3 method for class 'boostmtree' predict(object,         x,         tm,         id,         y,         M,         eps = 1e-5,         useCVflag = FALSE,         ...)"},{"path":"https://ehrlinger.github.io/boostmtree/reference/predict.boostmtree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction for Boosted multivariate trees for longitudinal data. — predict.boostmtree","text":"object boosting object class (boostmtree, grow). x Data frame (matrix) containing test set x-values.  Rows     must duplicated match number time points     individual. missing, training x values used     tm, id y required     performance values returned. tm Time values test set individual one entry     row x.  Optional, missing, set unique time     values training values used individual     test-set performance values returned. id Unique subject identifier, one entry row     x.  Optional, missing, individual assumed     full time-profile specified unique time values     training data. y Test set y-values, one entry row  x. M Fixed value boosting step number.  Leave empty     determine optimized value obtained minimizing test-set error. eps Tolerance value used determining optimal M.     experts . useCVflag predicted value based estimate derived oob sample? ... arguments passed methods.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/predict.boostmtree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Prediction for Boosted multivariate trees for longitudinal data. — predict.boostmtree","text":"predicted time profile performance values obtained   test data boosted object grown training data. R-side parallel processing implemented replacing R function   lapply mclapply found parallel   package.  can set number cores accessed   mclapply issuing command options(mc.cores =   x), x number cores.  example, issuing   following options command uses available cores: options(mc.cores=detectCores()) However, can create high RAM usage, especially using   function partialPlot calls predict   function. Note performance values (example prediction error)   standardized overall y-standard deviation.   Thus, reported RMSE (root-mean-squared-error) actually standardized   RMSE.  Values reported optimal stopping time.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/predict.boostmtree.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction for Boosted multivariate trees for longitudinal data. — predict.boostmtree","text":"object class (boostmtree, predict), list      following components: boost.obj original boosting object. x test x-values, one row per individual        (.e. duplicated rows removed). time List component containing time        points given test individual. id Sorted subject identifier. y List containing test y-values. Y y-values, list-format, nominal ordinal Response      converted binary response. family Family y. ymean Overall mean y-values individuals. family =      \"Binary\", \"Nominal\" \"Ordinal\", ymean = 0. ysd Overall standard deviation y-values individuals. family =      \"Binary\", \"Nominal\" \"Ordinal\", ysd = 1. xvar.names X-variable names. K Number terminal nodes. n Total number subjects. ni Number repeated measures subject. n.Q Number class labels non-continuous response. Q_set Class labels non-continuous response. y.unq Unique y values non-continous response. nu Boosting regularization parameter. D Design matrix subject. df.D Number columns D. time.unq Vector unique time points. baselearner List length M containing base learners. gamma List length M, component        containing boosted tree fitted values. membership List length M, component        containing terminal node membership given boosting        iteration. mu Estimated mean profile optimized M. Prob_class family == \"Ordinal\", provides individual probabilty rather      cumulative probabilty. muhat Extrapolated mean profile unique time points        evaluated optimized M. Prob_hat_class Extrapolated Prob_class unique time points        evaluated optimized M. err.rate Test set standardized l1-error RMSE. rmse Test set standardized RMSE optimized M. Mopt optimized M.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/predict.boostmtree.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Prediction for Boosted multivariate trees for longitudinal data. — predict.boostmtree","text":"Hemant Ishwaran, Amol Pande Udaya B. Kogalur","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/predict.boostmtree.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Prediction for Boosted multivariate trees for longitudinal data. — predict.boostmtree","text":"Pande ., Li L., Rajeswaran J., Ehrlinger J., Kogalur U.B.,   Blackstone E.H., Ishwaran H. (2017).  Boosted multivariate trees   longitudinal data, Machine Learning, 106(2): 277–305.","code":""},{"path":[]},{"path":"https://ehrlinger.github.io/boostmtree/reference/predict.boostmtree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction for Boosted multivariate trees for longitudinal data. — predict.boostmtree","text":"","code":"if (FALSE) { # \\dontrun{ ##------------------------------------------------------------ ## Synthetic example (Response is continuous) ## ##  High correlation, quadratic time with quadratic interaction ##  largish number of noisy variables ## ##  Illustrates how modified gradient improves performance ##  also compares performance to ideal and well specified linear models  ##----------------------------------------------------------------------------  ## simulate the data ## simulation 2: main effects (x1, x3, x4), quad-time-interaction (x2) dtaO <- simLong(n = 100, ntest = 100, model = 2, family = \"Continuous\", q = 25)  ## save the data as both a list and data frame dtaL <- dtaO$dtaL dta <- dtaO$dta  ## get the training data trn <- dtaO$trn  ## save formulas for linear model comparisons f.true <- dtaO$f.true f.linr <- \"y~g( x1+x2+x3+x4+x1*time+x2*time+x3*time+x4*time )\"   ## modified tree gradient (default) o.1 <- boostmtree(dtaL$features[trn, ], dtaL$time[trn], dtaL$id[trn],dtaL$y[trn],        family = \"Continuous\",M = 350) p.1 <- predict(o.1, dtaL$features[-trn, ], dtaL$time[-trn], dtaL$id[-trn], dtaL$y[-trn])  ## non-modified tree gradient (nmtg) o.2 <- boostmtree(dtaL$features[trn, ], dtaL$time[trn], dtaL$id[trn], dtaL$y[trn],        family = \"Continuous\",M = 350, mod.grad = FALSE) p.2 <- predict(o.2, dtaL$features[-trn, ], dtaL$time[-trn], dtaL$id[-trn], dtaL$y[-trn])  ## set rho = 0 o.3 <- boostmtree(dtaL$features[trn, ], dtaL$time[trn], dtaL$id[trn], dtaL$y[trn],        family = \"Continuous\",M = 350, rho = 0) p.3 <- predict(o.3, dtaL$features[-trn, ], dtaL$time[-trn], dtaL$id[-trn], dtaL$y[-trn])   ##rmse values compared to generalized least squares (GLS) ##for true model and well specified linear models (LM) cat(\"true LM           :\", boostmtree:::gls.rmse(f.true,dta,trn),\"\\n\") cat(\"well specified LM :\", boostmtree:::gls.rmse(f.linr,dta,trn),\"\\n\") cat(\"boostmtree        :\", p.1$rmse,\"\\n\") cat(\"boostmtree  (nmtg):\", p.2$rmse,\"\\n\") cat(\"boostmtree (rho=0):\", p.3$rmse,\"\\n\")  ##predicted value plots plot(p.1) plot(p.2) plot(p.3)    ##------------------------------------------------------------ ## Synthetic example (Response is binary) ## ##  High correlation, quadratic time with quadratic interaction ##  largish number of noisy variables ##----------------------------------------------------------------------------  ## simulate the data ## simulation 2: main effects (x1, x3, x4), quad-time-interaction (x2) dtaO <- simLong(n = 100, ntest = 100, model = 2, family = \"Binary\", q = 25)  ## save the data as both a list and data frame dtaL <- dtaO$dtaL dta <- dtaO$dta  ## get the training data trn <- dtaO$trn  ## save formulas for linear model comparisons f.true <- dtaO$f.true f.linr <- \"y~g( x1+x2+x3+x4+x1*time+x2*time+x3*time+x4*time )\"   ## modified tree gradient (default) o.1 <- boostmtree(dtaL$features[trn, ], dtaL$time[trn], dtaL$id[trn],dtaL$y[trn],        family = \"Binary\",M = 350) p.1 <- predict(o.1, dtaL$features[-trn, ], dtaL$time[-trn], dtaL$id[-trn], dtaL$y[-trn])  } # }"},{"path":"https://ehrlinger.github.io/boostmtree/reference/print.boostmtree.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Summary Output — print.boostmtree","title":"Print Summary Output — print.boostmtree","text":"Print summary output boosting analysis.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/print.boostmtree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Summary Output — print.boostmtree","text":"","code":"# S3 method for class 'boostmtree' print(x, ...)"},{"path":"https://ehrlinger.github.io/boostmtree/reference/print.boostmtree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Summary Output — print.boostmtree","text":"x object class (boostmtree, grow) (boostmtree, \tpredict). ... arguments passed methods.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/print.boostmtree.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Summary Output — print.boostmtree","text":"Hemant Ishwaran, Amol Pande Udaya B. Kogalur","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/print.boostmtree.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Print Summary Output — print.boostmtree","text":"Pande ., Li L., Rajeswaran J., Ehrlinger J., Kogalur U.B.,   Blackstone E.H., Ishwaran H. (2017).  Boosted multivariate trees   longitudinal data, Machine Learning, 106(2): 277–305.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/simLong.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate longitudinal data — simLong","title":"Simulate longitudinal data — simLong","text":"Simulates longitudinal data continuous binary response   models increasing complexity   covariate-time interactions.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/simLong.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate longitudinal data — simLong","text":"","code":"simLong(n,         ntest = 0,         N = 5,         rho = 0.8,         type = c(\"corCompSym\", \"corAR1\", \"corSymm\", \"iid\"),         model = c(0, 1, 2, 3),         family = c(\"Continuous\",\"Binary\"),         phi = 1,         q = 0,         ...)"},{"path":"https://ehrlinger.github.io/boostmtree/reference/simLong.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate longitudinal data — simLong","text":"n Requested training sample size. ntest Requested test sample size. N Parameter controlling number time points per subject. rho Correlation parameter. type Type correlation matrix. model Requested simulation model. family Family response y. Use one {\"Continuous\", \"Binary\"} based scale y. phi Variance measurement error. q Number zero-signal variables (.e., variables unrelated y). ... arguments passed methods.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/simLong.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate longitudinal data — simLong","text":"Simulates longitudinal data 3 main effects (possibly) covariate-time   interaction.  Complexity model specified using option model: model=0: Linear covariate-time interactions. model=1: Linear covariate-time interaction. model=2: Quadratic time-quadratic covariate     interaction. model=3: Quadratic time-quadratic two-way     covariate interaction. details see Pande et al. (2017).","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/simLong.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate longitudinal data — simLong","text":"invisible list following components: dtaL List containing simulated data following order:     features, time, id y. dta Simulated data given data frame. trn Index id values identifying training data. f.true Formula simulation model.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/simLong.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simulate longitudinal data — simLong","text":"Hemant Ishwaran, Amol Pande Udaya B. Kogalur","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/simLong.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate longitudinal data — simLong","text":"Pande ., Li L., Rajeswaran J., Ehrlinger J., Kogalur U.B.,   Blackstone E.H., Ishwaran H. (2017).  Boosted multivariate trees   longitudinal data, Machine Learning, 106(2): 277–305.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/simLong.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate longitudinal data — simLong","text":"","code":"if (FALSE) { # \\dontrun{ ##------------------------------------------------------------ ##  Response is continuous ##----------------------------------------------------------------------------  ## set the number of boosting iterations M <- 500  ## simulation 0: only main effects (x1, x3, x4) dta <- simLong(n = 100, ntest = 100, model = 0, family = \"Continuous\", q = 5) trn <- dta$trn dtaL <- dta$dtaL dta <- dta$dta obj.0 <-  boostmtree(dtaL$features[trn, ], dtaL$time[trn], dtaL$id[trn], dtaL$y[trn],            family = \"Continuous\", M = M) pred.0 <- predict(obj.0, dtaL$features[-trn, ], dtaL$time[-trn], dtaL$id[-trn], dtaL$y[-trn])    ##------------------------------------------------------------ ##  Response is binary ##----------------------------------------------------------------------------  ## set the number of boosting iterations M <- 500  ## simulation 0: only main effects (x1, x3, x4) dta <- simLong(n = 100, ntest = 100, model = 0, family = \"Binary\", q = 5) trn <- dta$trn dtaL <- dta$dtaL dta <- dta$dta obj.0 <-  boostmtree(dtaL$features[trn, ], dtaL$time[trn], dtaL$id[trn], dtaL$y[trn],            family = \"Binary\", M = M) pred.0 <- predict(obj.0, dtaL$features[-trn, ], dtaL$time[-trn], dtaL$id[-trn], dtaL$y[-trn]) } # }"},{"path":"https://ehrlinger.github.io/boostmtree/reference/spirometry.html","id":null,"dir":"Reference","previous_headings":"","what":"Spirometry Data — spirometry","title":"Spirometry Data — spirometry","text":"Data consists 9471 longitudinal evaluations forced 1-second     expiratory volume (FEV1-percentage predicted) lung     transplant 509 patients underwent lung transplant (LTx)     Cleveland Clinic.  Twenty three patient/procedure variables     collected time transplant.  major objectives     evaluate temporal trend FEV1 LTx, identify     factors associated post-LTx FEV1 assessing differences     trends Single LTx versus Double LTx.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/spirometry.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Spirometry Data — spirometry","text":"list containing four elements: 23 patient variables (features). Time points (time). Unique patient identifier (id). FEV1-outcomes (y).","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/spirometry.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Spirometry Data — spirometry","text":"Mason D.P., Rajeswaran J., Li L., Murthy S.C., Su J.W., Pettersson G.B.,   Blackstone E.H. Effect changes postoperative spirometry   survival lung transplantation. J. Thorac. Cardiovasc. Surg.,   144:197-203, 2012.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/spirometry.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spirometry Data — spirometry","text":"","code":"data(spirometry, package = \"boostmtree\")"},{"path":"https://ehrlinger.github.io/boostmtree/reference/vimp.boostmtree.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable Importance — vimp.boostmtree","title":"Variable Importance — vimp.boostmtree","text":"Calculate VIMP score individual covariates joint VIMP   multiple covariates.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/vimp.boostmtree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable Importance — vimp.boostmtree","text":"","code":"vimp.boostmtree(object,                 x.names = NULL,                 joint = FALSE)"},{"path":"https://ehrlinger.github.io/boostmtree/reference/vimp.boostmtree.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable Importance — vimp.boostmtree","text":"object boosting object class (boostmtree, grow) class (boostmtree, predict). x.names Names x-variables VIMP requested. NULL, VIMP   calcuated covariates joint Estimate individual VIMP covariate x.names joint VIMP   covariates combine.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/vimp.boostmtree.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Variable Importance — vimp.boostmtree","text":"Variable Importance (VIMP) calcuated covariates individually joint   VIMP calulated covariates specfied x.names.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/vimp.boostmtree.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Variable Importance — vimp.boostmtree","text":"Hemant Ishwaran, Amol Pande Udaya B. Kogalur","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/vimp.boostmtree.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Variable Importance — vimp.boostmtree","text":"Friedman J.H. Greedy function approximation: gradient   boosting machine, Ann. Statist., 5:1189-1232, 2001.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/vimp.boostmtree.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable Importance — vimp.boostmtree","text":"","code":"if (FALSE) { # \\dontrun{ ##------------------------------------------------------------ ## Synthetic example (Response is continuous) ## VIMP is based on in-sample CV using out of bag data ##------------------------------------------------------------- #simulate the data dta <- simLong(n = 50, N = 5, rho =.80, model = 2,family = \"Continuous\")$dtaL  #basic boosting call boost.grow <- boostmtree(dta$features, dta$time, dta$id, dta$y,               family = \"Continuous\", M = 300,cv.flag = TRUE) vimp.grow <- vimp.boostmtree(object = boost.grow,x.names=c(\"x1\",\"x2\"),joint = FALSE) vimp.joint.grow <- vimp.boostmtree(object = boost.grow,x.names=c(\"x1\",\"x2\"),joint = TRUE)  ##------------------------------------------------------------ ## Synthetic example (Response is continuous) ## VIMP is based on test data ##------------------------------------------------------------- #simulate the data dtaO <- simLong(n = 100, ntest = 100, N = 5, rho =.80, model = 2, family = \"Continuous\")  ## save the data as both a list and data frame dtaL <- dtaO$dtaL dta <- dtaO$dta  ## get the training data trn <- dtaO$trn  #basic boosting call boost.grow <- boostmtree(dtaL$features[trn,], dtaL$time[trn], dtaL$id[trn], dtaL$y[trn],               family = \"Continuous\", M = 300) boost.pred <- predict(boost.grow,dtaL$features[-trn,], dtaL$time[-trn], dtaL$id[-trn],               dtaL$y[-trn]) vimp.pred <- vimp.boostmtree(object = boost.pred,x.names=c(\"x1\",\"x2\"),joint = FALSE) vimp.joint.pred <- vimp.boostmtree(object = boost.pred,x.names=c(\"x1\",\"x2\"),joint = TRUE)  } # }"},{"path":"https://ehrlinger.github.io/boostmtree/reference/vimpPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Variable Importance (VIMP) plot — vimpPlot","title":"Variable Importance (VIMP) plot — vimpPlot","text":"Barplot displaying VIMP.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/vimpPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variable Importance (VIMP) plot — vimpPlot","text":"","code":"vimpPlot(vimp,          Q_set = NULL,          Time_Interaction = TRUE,          xvar.names = NULL,          cex.xlab = NULL,          ymaxlim = 0,          ymaxtimelim = 0,          subhead.cexval = 1,          yaxishead = NULL,          xaxishead = NULL,          main = \"Variable Importance (%)\",          col = grey(0.8),          cex.lab = 1.5,          subhead.labels = c(\"Time-Interactions Effects\", \"Main Effects\"),          ylbl = FALSE,          seplim = NULL,          eps = 0.1,          Width_Bar = 1,          path_saveplot = NULL,          Verbose = TRUE)"},{"path":"https://ehrlinger.github.io/boostmtree/reference/vimpPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variable Importance (VIMP) plot — vimpPlot","text":"vimp VIMP values. Q_set Provide names various levels nominal ordinal response. Time_Interaction Whether VIMP estimated longitudinal data, case VIMP available covariate covariate-time interaction. Default TRUE. FALSE, VIMP assumed estimated cross-sectional data. xvar.names Names covariates. NULL, names assigned x1, x2,...,xp. cex.xlab Magnification names covariates () barplot. ymaxlim default, use range vimp values covariates ylim. one wants extend ylim, add amount ylim extend . ymaxtimelim default, use range vimp values covariates-time ylim. one wants extend ylim, add amount ylim extend . Argument works longitudinal setting. subhead.cexval Magnification subhead.labels. Argument works longitudinal setting. yaxishead represent vector two values points y-axis. Corresponding values, lables subhead.labels shown. First argument corresponds covariate-time interaction, whereas second argument main effect. Argument works longitudinal setting. xaxishead represent vector two values points x-axis. Corresponding values, lables subhead.labels shown. First argument corresponds covariate-time interaction, whereas second argument main effect. Argument works longitudinal setting. main Main title plot. col Color plot. cex.lab Magnification x y lables. subhead.labels Labels corresponding plot. Default \"Time-Interactions Effects\" barplot x-axis, \"Main Effects\" barplot x-axis. ylbl labels sub-headings shown left side y-axis. seplim ylbl TRUE, distance lables sub-headings. eps Amount gap top barplot variable names. Width_Bar Width barplot. path_saveplot Provide location plot saved. default plot saved temporary folder. Verbose Display path plot saved?","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/vimpPlot.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Variable Importance (VIMP) plot — vimpPlot","text":"Barplot displaying VIMP. analysis univariate case, VIMP displayed x-axis. analysis longitudinal case, VIMP covariates (main effects) shown x-axis VIMP covariate-time interactions (time interaction effects) shown x-axis. either case, negative vimp value set zero.","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/vimpPlot.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Variable Importance (VIMP) plot — vimpPlot","text":"Hemant Ishwaran, Amol Pande Udaya B. Kogalur","code":""},{"path":"https://ehrlinger.github.io/boostmtree/reference/vimpPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variable Importance (VIMP) plot — vimpPlot","text":"","code":"if (FALSE) { # \\dontrun{ ##------------------------------------------------------------ ## Synthetic example ## high correlation, quadratic time with quadratic interaction ##------------------------------------------------------------- #simulate the data dta <- simLong(n = 50, N = 5, rho =.80, model = 2,family = \"Continuous\")$dtaL  #basic boosting call boost.grow <- boostmtree(dta$features, dta$time, dta$id, dta$y,                family = \"Continuous\",M = 300, cv.flag = TRUE) vimp.grow <- vimp.boostmtree(object = boost.grow)                # VIMP plot vimpPlot(vimp = vimp.grow, ymaxlim = 20, ymaxtimelim = 20,          xaxishead = c(3,3), yaxishead = c(65,65),          cex.xlab = 1, subhead.cexval = 1.2) } # }"}]
